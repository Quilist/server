generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                 @id @default(autoincrement())
  acc              String?
  f_name           String?
  s_name           String?
  company          String?
  e_mail           String              @unique
  phone            String?
  username         String?
  pass             String?
  status           Int                 @default(1)
  role             Int                 @default(1)
  google           String?
  facebook         String?
  address          String?
  notes            String?
  created_at       String
  updated_at       String
  deleted_at       String?
  products         products[]
  banks_details    banks_details[]
  cash_accounts    cash_accounts[]
  Client           clients[]
  CurrencyExchange currency_exchange[]
  MovingMoney      moving_money[]
  Employee         employees[]
  Expenditure      expenditure[]
  IncomeItem       income_items[]
  LegalEntity      legal_entites[]
  Measure          measure[]
  Pay              pay[]
  PayType          pay_type[]
  StoreHouse       storehouse[]
  Supplier         suppliers[]
  TypePrice        type_price[]
  UserCurrency     user_currencies[]
  products_groups  products_groups[]
}

//Reference
model currency {
  id                       Int                     @id @default(autoincrement())
  name                     String?
  represent                String?
  id_user                  Int?
  created_at               String
  updated_at               String
  cash_accounts            cash_and_accounts[]
  cash_accounts_balance    cash_accounts_balance[]
  from_currencies_exchange currency_exchange[]     @relation("FromExhangeCurrency")
  to_currencies_exchange   currency_exchange[]     @relation("ToExhangeCurrency")
  from_user_currencies     user_currencies[]       @relation("FromUserCurrency")
  to_user_currencies       user_currencies[]       @relation("ToUserCurrency")
  pay_type                 pay_type[]
}

model banks_details {
  id               Int             @id @default(autoincrement())
  user             User?           @relation(fields: [id_user], references: [id])
  id_user          Int
  bank_name        String          @unique
  MFO              String?
  checking_account String?
  created_at       String
  updated_at       String
  cash_accounts    cash_accounts[]
}

model expenditure {
  id         Int    @id @default(autoincrement())
  user       User?  @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String @unique
  created_at String
  updated_at String
}

model income_items {
  id         Int    @id @default(autoincrement())
  user       User?  @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String @unique
  created_at String
  updated_at String
}

model measure {
  id         Int        @id @default(autoincrement())
  user       User?      @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String     @unique
  created_at String
  updated_at String
  products   products[]
}

model storehouse {
  id         Int    @id @default(autoincrement())
  user       User?  @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String @unique
  created_at String
  updated_at String
}

model type_price {
  id         Int    @id @default(autoincrement())
  user       User?  @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String @unique
  created_at String
  updated_at String
}

//Cash and accounts
model cash_and_accounts {
  id          Int       @id @default(autoincrement())
  currency    currency? @relation(fields: [currency_id], references: [id])
  currency_id Int
  balance     Decimal   @db.Decimal(9, 2)
  created_at  String
  updated_at  String
}

model cash_accounts {
  id                    Int                     @id @default(autoincrement())
  user                  User?                   @relation(fields: [id_user], references: [id])
  id_user               Int
  name                  String?
  user_currency_id      Int?
  banks_details         banks_details?          @relation(fields: [banks_details_id], references: [id])
  banks_details_id      Int?
  balanceIn             String?
  turnoverDebt          String?
  turnoverCred          String?
  type                  String?
  type_order            String?
  stream                Json?
  from_moving_money     moving_money[]          @relation("FromCashAccount")
  to_moving_money       moving_money[]          @relation("ToCashAccount")
  created_at            String
  updated_at            String
  deleted_at            String?
  CurrencyExchange      currency_exchange[]
  Employee              employees[]
  pay                   pay[]
  cash_accounts_balance cash_accounts_balance[]
}

model cash_accounts_balance {
  id              Int            @id @default(autoincrement())
  cash_account    cash_accounts? @relation(fields: [cash_account_id], references: [id], onDelete: Cascade)
  cash_account_id Int
  currency        currency?      @relation(fields: [currency_id], references: [id])
  currency_id     Int
  balance         Decimal        @db.Decimal(9, 2)
}

model clients {
  id         Int     @id @default(autoincrement())
  user       User?   @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String?
  mobile     String?
  company    String?
  mail       String?
  group_id   Int?
  address    String?
  discount   String?
  duty       String?
  group      String?
  notes      String? @db.Text
  created_at String
  updated_at String
  deleted_at String?
}

model currency_exchange {
  id               Int            @id @default(autoincrement())
  user             User?          @relation(fields: [id_user], references: [id])
  id_user          Int
  from_currency    currency?      @relation("FromExhangeCurrency", fields: [from_currency_id], references: [id])
  from_currency_id Int
  to_currency      currency?      @relation("ToExhangeCurrency", fields: [to_currency_id], references: [id])
  to_currency_id   Int
  exchange_rate    Decimal        @db.Decimal(15, 2)
  cash_account     cash_accounts? @relation(fields: [cash_account_id], references: [id])
  cash_account_id  Int
  amount_pay       Decimal        @db.Decimal(15, 2)
  amount_receive   Decimal        @db.Decimal(15, 2)
  note             String?        @db.Text
  created_at       String
  updated_at       String
  deleted_at       String?
}

model moving_money {
  id                   Int            @id @default(autoincrement())
  user                 User?          @relation(fields: [id_user], references: [id])
  id_user              Int
  from_cash_account    cash_accounts? @relation("FromCashAccount", fields: [from_cash_account_id], references: [id])
  from_cash_account_id Int
  to_cash_account      cash_accounts? @relation("ToCashAccount", fields: [to_cash_account_id], references: [id])
  to_cash_account_id   Int
  amount               Decimal        @db.Decimal(15, 2)
  note                 String?        @db.Text
  created_at           String
  updated_at           String
  deleted_at           String?
}

model employees {
  id             Int            @id @default(autoincrement())
  user           User?          @relation(fields: [id_user], references: [id])
  id_user        Int
  f_name         String?
  s_name         String?
  mobile         String?
  password       String
  mail           String
  id_role        String?
  cash_acc       cash_accounts? @relation(fields: [cash_acc_id], references: [id])
  cash_acc_id    Int
  dashboard      Int            @default(0) @db.TinyInt
  supplier       Int            @default(0) @db.TinyInt
  cash_account   Int            @default(0) @db.TinyInt
  order_supplier String?        @db.Text
  created_at     String
  updated_at     String
  deleted_at     String?
}

model legal_entites {
  id         Int     @id @default(autoincrement())
  user       User?   @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String
  mail       String?
  site       String?
  mobile     String?
  account    String?
  address    String?
  edrpou     String?
  inn        String?
  legal_name String?
  low_system String?
  director   String?
  nds        Boolean @default(false)
  created_at String
  updated_at String
  deleted_at String?
  pay        pay[]
}

model pay {
  id              Int            @id @default(autoincrement())
  user            User?          @relation(fields: [id_user], references: [id], onDelete: Cascade)
  id_user         Int
  number          Int
  type_id         Int?
  type            String?
  type_order      String
  cash_account    cash_accounts? @relation(fields: [cash_account_id], references: [id])
  cash_account_id Int
  legal_entity    legal_entites? @relation(fields: [legal_entity_id], references: [id])
  legal_entity_id Int?
  note            String?        @db.Text
  payments        pay_type[]     @relation("Payments")
  created_at      String
  updated_at      String
  deleted_at      String?
}

model pay_type {
  id          Int       @id @default(autoincrement())
  pay         pay?      @relation("Payments", fields: [pay_id], references: [id], onDelete: Cascade)
  pay_id      Int
  currency    currency? @relation(fields: [currency_id], references: [id])
  currency_id Int
  amount      Decimal   @db.Decimal(15, 2)
  type_pay    String
  type_amount String
  created_at  String
  updated_at  String
  User        User?     @relation(fields: [userId], references: [id])
  userId      Int?
}

model suppliers {
  id         Int        @id @default(autoincrement())
  user       User?      @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String
  mail       String?
  mobile     String?
  company    String?
  edrpou     String?
  address    String?
  code_nds   String?
  nds        Boolean    @default(false)
  note       String?    @db.Text
  created_at String
  updated_at String
  deleted_at String?
  products   products[]
}

model user_currencies {
  id               Int       @id @default(autoincrement())
  user             User?     @relation(fields: [id_user], references: [id])
  id_user          Int
  from_currency    currency? @relation("FromUserCurrency", fields: [from_currency_id], references: [id])
  from_currency_id Int
  to_currency      currency? @relation("ToUserCurrency", fields: [to_currency_id], references: [id])
  to_currency_id   Int
  exchange_rate    Decimal   @db.Decimal(15, 2)
  created_at       String
  updated_at       String
  deleted_at       String?
}

//Products
model products_groups {
  id         Int        @id @default(autoincrement())
  user       User?      @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String     @unique
  created_at String
  updated_at String
  products   products[]
}

model products {
  id          Int                    @id @default(autoincrement())
  user        User?                  @relation(fields: [id_user], references: [id])
  id_user     Int
  is_model    Boolean                @default(false)
  parent      products?              @relation("ProductParent", fields: [parent_id], references: [id], onDelete: Cascade)
  parent_id   Int?                   @unique
  name        String
  group       products_groups?       @relation(fields: [group_id], references: [id])
  group_id    Int
  measure     measure?               @relation(fields: [measure_id], references: [id])
  measure_id  Int
  barcode     String
  vendor_code String
  supplier    suppliers?             @relation(fields: [supplier_id], references: [id])
  supplier_id Int
  min_stock   Int                    @default(0)
  price       Decimal?               @db.Decimal(15, 2)
  note        String?                @db.Text
  created_at  String
  updated_at  String
  deleted_at  String?
  amount_data products_amount_data[]
  parents     products?              @relation("ProductParent")
}

model products_amount_data {
  id          Int       @id @default(autoincrement())
  product     products? @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id  Int
  type        String
  name        String
  amount      Decimal   @db.Decimal(9, 2)
  currency_id String
  created_at  String
  updated_at  String
}
