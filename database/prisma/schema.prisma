generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                         Int                          @id @default(autoincrement())
  acc                        String?
  f_name                     String?
  s_name                     String?
  company                    String?
  e_mail                     String                       @unique
  phone                      String?
  username                   String?
  pass                       String?
  status                     Int                          @default(1)
  role                       Int                          @default(1)
  google                     String?
  facebook                   String?
  address                    String?
  notes                      String?
  created_at                 String
  updated_at                 String
  deleted_at                 String?
  products                   products[]
  banks_details              banks_details[]
  cash_accounts              cash_accounts[]
  Client                     clients[]
  CurrencyExchange           currency_exchange[]
  MovingMoney                moving_money[]
  Employee                   employees[]
  Expenditure                expenditure[]
  IncomeItem                 income_items[]
  LegalEntity                legal_entites[]
  Measure                    measure[]
  Pay                        pay[]
  PayType                    pay_type[]
  StoreHouse                 storehouse[]
  Supplier                   suppliers[]
  TypePrice                  type_price[]
  UserCurrency               user_currencies[]
  products_groups            products_groups[]
  cash_accounts_users        cash_accounts_users[]
  products_colors            products_colors[]
  products_sizes             products_sizes[]
  buy_sell                   buy_sell[]
  buy_sell_product           buy_sell_product[]
  products_import            products_import[]
  products_import_product    products_import_product[]
  products_moving            products_moving[]
  products_moving_product    products_moving_product[]
  products_write_off         products_write_off[]
  products_write_off_product products_write_off_product[]
  products_posting           products_posting[]
  products_posting_product   products_posting_product[]
}

//Reference
model currency {
  id                       Int                     @id @default(autoincrement())
  name                     String?
  represent                String?
  id_user                  Int?
  created_at               String
  updated_at               String
  cash_accounts            cash_and_accounts[]
  cash_accounts_balance    cash_accounts_balance[]
  from_currencies_exchange currency_exchange[]     @relation("FromExhangeCurrency")
  to_currencies_exchange   currency_exchange[]     @relation("ToExhangeCurrency")
  from_user_currencies     user_currencies[]       @relation("FromUserCurrency")
  to_user_currencies       user_currencies[]       @relation("ToUserCurrency")
  pay_type                 pay_type[]
  products_price           products_price[]
  products_leftover        products_leftover[]
  MovingMoney              moving_money[]
  buy_sell                 buy_sell[]
  products_import          products_import[]
  products_posting         products_posting[]
}

model banks_details {
  id               Int             @id @default(autoincrement())
  user             User?           @relation(fields: [id_user], references: [id])
  id_user          Int
  bank_name        String
  MFO              String?
  checking_account String?
  created_at       String
  updated_at       String
  cash_accounts    cash_accounts[]
}

model expenditure {
  id                 Int                  @id @default(autoincrement())
  user               User?                @relation(fields: [id_user], references: [id])
  id_user            Int
  name               String
  created_at         String
  updated_at         String
  products_write_off products_write_off[]
}

model income_items {
  id               Int                @id @default(autoincrement())
  user             User?              @relation(fields: [id_user], references: [id])
  id_user          Int
  name             String
  created_at       String
  updated_at       String
  products_posting products_posting[]
  products_import  products_import[]
}

model measure {
  id                         Int                          @id @default(autoincrement())
  user                       User?                        @relation(fields: [id_user], references: [id])
  id_user                    Int
  name                       String
  created_at                 String
  updated_at                 String
  products                   products[]
  buy_sell_product           buy_sell_product[]
  products_import_product    products_import_product[]
  products_moving_product    products_moving_product[]
  products_write_off_product products_write_off_product[]
  products_posting_product   products_posting_product[]
}

model storehouse {
  id                        Int                  @id @default(autoincrement())
  user                      User?                @relation(fields: [id_user], references: [id])
  id_user                   Int
  name                      String
  created_at                String
  updated_at                String
  products_leftover         products_leftover[]
  buy_sell                  buy_sell[]
  products_moving_sender    products_moving[]    @relation("storehouseSender")
  products_moving_consignee products_moving[]    @relation("storehouseConsignee")
  products_import           products_import[]
  products_write_off        products_write_off[]
  products_posting          products_posting[]
}

model type_price {
  id               Int                @id @default(autoincrement())
  user             User?              @relation(fields: [id_user], references: [id])
  id_user          Int
  name             String
  created_at       String
  updated_at       String
  products_price   products_price[]
  buy_sell         buy_sell[]
  products_import  products_import[]
  products_posting products_posting[]
}

//Cash and accounts
model cash_and_accounts {
  id          Int       @id @default(autoincrement())
  currency    currency? @relation(fields: [currency_id], references: [id])
  currency_id Int
  balance     Decimal   @db.Decimal(9, 2)
  created_at  String
  updated_at  String
}

model cash_accounts {
  id                    Int                     @id @default(autoincrement())
  user                  User?                   @relation(fields: [id_user], references: [id])
  id_user               Int
  name                  String?
  user_currency_id      Int?
  banks_details         banks_details?          @relation(fields: [banks_details_id], references: [id])
  banks_details_id      Int?
  balanceIn             String?
  turnoverDebt          String?
  turnoverCred          String?
  type                  String?
  type_order            String?
  stream                Json?
  from_moving_money     moving_money[]          @relation("FromCashAccount")
  to_moving_money       moving_money[]          @relation("ToCashAccount")
  created_at            String
  updated_at            String
  deleted_at            String?
  CurrencyExchange      currency_exchange[]
  Employee              employees[]
  pay                   pay[]
  cash_accounts_balance cash_accounts_balance[]
  cash_accounts_users   cash_accounts_users[]
}

model cash_accounts_balance {
  id              Int            @id @default(autoincrement())
  cash_account    cash_accounts? @relation(fields: [cash_account_id], references: [id], onDelete: Cascade)
  cash_account_id Int
  currency        currency?      @relation(fields: [currency_id], references: [id])
  currency_id     Int
  balance         Decimal        @db.Decimal(9, 2)
}

model cash_accounts_users {
  id              Int            @id @default(autoincrement())
  user            User?          @relation(fields: [id_user], references: [id])
  id_user         Int
  cash_account    cash_accounts? @relation(fields: [cash_account_id], references: [id], onDelete: Cascade)
  cash_account_id Int
  created_at      String
  updated_at      String
}

model clients {
  id         Int        @id @default(autoincrement())
  user       User?      @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String?
  mobile     String?
  company    String?
  mail       String?
  group_id   Int?
  address    String?
  discount   String?
  duty       String?
  group      String?
  notes      String?    @db.Text
  debit      Decimal    @default(0) @db.Decimal(9, 2)
  credit     Decimal    @default(0) @db.Decimal(9, 2)
  created_at String
  updated_at String
  deleted_at String?
  buy_sell   buy_sell[]
}

model currency_exchange {
  id               Int            @id @default(autoincrement())
  user             User?          @relation(fields: [id_user], references: [id])
  id_user          Int
  from_currency    currency?      @relation("FromExhangeCurrency", fields: [from_currency_id], references: [id])
  from_currency_id Int
  to_currency      currency?      @relation("ToExhangeCurrency", fields: [to_currency_id], references: [id])
  to_currency_id   Int
  exchange_rate    Decimal        @db.Decimal(15, 2)
  cash_account     cash_accounts? @relation(fields: [cash_account_id], references: [id])
  cash_account_id  Int
  amount_pay       Decimal        @db.Decimal(15, 2)
  amount_receive   Decimal        @db.Decimal(15, 2)
  note             String?        @db.Text
  created_at       String
  updated_at       String
  deleted_at       String?
}

model moving_money {
  id                   Int            @id @default(autoincrement())
  user                 User?          @relation(fields: [id_user], references: [id])
  id_user              Int
  from_cash_account    cash_accounts? @relation("FromCashAccount", fields: [from_cash_account_id], references: [id])
  from_cash_account_id Int
  to_cash_account      cash_accounts? @relation("ToCashAccount", fields: [to_cash_account_id], references: [id])
  to_cash_account_id   Int
  currency             currency?      @relation(fields: [currency_id], references: [id])
  currency_id          Int
  amount               Decimal        @db.Decimal(15, 2)
  note                 String?        @db.Text
  created_at           String
  updated_at           String
  deleted_at           String?
}

model employees {
  id             Int            @id @default(autoincrement())
  user           User?          @relation(fields: [id_user], references: [id])
  id_user        Int
  f_name         String?
  s_name         String?
  mobile         String?
  pass           String
  e_mail         String         @unique
  id_role        String?
  cash_acc       cash_accounts? @relation(fields: [cash_acc_id], references: [id])
  cash_acc_id    Int?
  dashboard      Int            @default(0) @db.TinyInt
  supplier       Int            @default(0) @db.TinyInt
  cash_account   Int            @default(0) @db.TinyInt
  order_supplier String?        @db.Text
  created_at     String
  updated_at     String
  deleted_at     String?
}

model legal_entites {
  id         Int        @id @default(autoincrement())
  user       User?      @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String
  mail       String?
  site       String?
  mobile     String?
  account    String?
  address    String?
  edrpou     String?
  inn        String?
  legal_name String?
  low_system String?
  director   String?
  nds        Boolean    @default(false)
  created_at String
  updated_at String
  deleted_at String?
  pay        pay[]
  buy_sell   buy_sell[]
}

model pay {
  id              Int            @id @default(autoincrement())
  user            User?          @relation(fields: [id_user], references: [id], onDelete: Cascade)
  id_user         Int
  number          Int
  type_id         Int?
  type            String?
  type_order      String
  cash_account    cash_accounts? @relation(fields: [cash_account_id], references: [id])
  cash_account_id Int
  legal_entity    legal_entites? @relation(fields: [legal_entity_id], references: [id])
  legal_entity_id Int?
  note            String?        @db.Text
  payments        pay_type[]     @relation("Payments")
  created_at      String
  updated_at      String
  deleted_at      String?
}

model pay_type {
  id          Int       @id @default(autoincrement())
  pay         pay?      @relation("Payments", fields: [pay_id], references: [id], onDelete: Cascade)
  pay_id      Int
  currency    currency? @relation(fields: [currency_id], references: [id])
  currency_id Int
  amount      Decimal   @db.Decimal(15, 2)
  type_pay    String
  type_amount String
  created_at  String
  updated_at  String
  User        User?     @relation(fields: [userId], references: [id])
  userId      Int?
}

model suppliers {
  id         Int        @id @default(autoincrement())
  user       User?      @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String
  mail       String?
  mobile     String?
  company    String?
  discount   String?
  duty       String?
  edrpou     String?
  address    String?
  code_nds   String?
  nds        Boolean    @default(false)
  note       String?    @db.Text
  debit      Decimal    @default(0) @db.Decimal(9, 2)
  credit     Decimal    @default(0) @db.Decimal(9, 2)
  created_at String
  updated_at String
  deleted_at String?
  products   products[]
  buy_sell   buy_sell[]
}

model user_currencies {
  id               Int       @id @default(autoincrement())
  user             User?     @relation(fields: [id_user], references: [id])
  id_user          Int
  from_currency    currency? @relation("FromUserCurrency", fields: [from_currency_id], references: [id])
  from_currency_id Int
  to_currency      currency? @relation("ToUserCurrency", fields: [to_currency_id], references: [id])
  to_currency_id   Int
  exchange_rate    Decimal   @db.Decimal(15, 2)
  created_at       String
  updated_at       String
  deleted_at       String?
}

//Products
model products_groups {
  id         Int        @id @default(autoincrement())
  user       User?      @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String     @unique
  created_at String
  updated_at String
  products   products[]
}

model products_colors {
  id         Int        @id @default(autoincrement())
  user       User?      @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String     @unique
  created_at String
  updated_at String
  products   products[]
}

model products_sizes {
  id         Int        @id @default(autoincrement())
  user       User?      @relation(fields: [id_user], references: [id])
  id_user    Int
  name       Int        @unique
  created_at String
  updated_at String
  products   products[]
}

model products {
  id                         Int                          @id @default(autoincrement())
  user                       User?                        @relation(fields: [id_user], references: [id])
  id_user                    Int
  parent_id                  Int?
  type                       String
  name                       String
  group                      products_groups?             @relation(fields: [group_id], references: [id])
  group_id                   Int?
  measure                    measure?                     @relation(fields: [measure_id], references: [id])
  measure_id                 Int?
  color                      products_colors?             @relation(fields: [color_id], references: [id])
  color_id                   Int?
  size                       products_sizes?              @relation(fields: [size_id], references: [id])
  size_id                    Int?
  barcode                    Int?
  vendor_code                Int?
  supplier                   suppliers?                   @relation(fields: [supplier_id], references: [id])
  supplier_id                Int?
  min_stock                  Int?                         @default(0)
  price                      Decimal?                     @db.Decimal(15, 2)
  note                       String?                      @db.Text
  created_at                 String
  updated_at                 String
  deleted_at                 String?
  prices                     products_price[]
  leftovers                  products_leftover[]
  childs                     products_childs[]            @relation("ProductChild")
  childs_from                products_childs[]            @relation("ProductFromChild")
  buy_sell_product           buy_sell_product[]
  products_import_product    products_import_product[]
  products_moving_product    products_moving_product[]
  products_write_off_product products_write_off_product[]
  products_posting_product   products_posting_product[]
}

model products_childs {
  id               Int       @id @default(autoincrement())
  product          products? @relation("ProductChild", fields: [product_id], references: [id], onDelete: Cascade)
  product_id       Int
  product_child    products? @relation("ProductFromChild", fields: [product_child_id], references: [id], onDelete: Cascade)
  product_child_id Int
  min_stock        Int       @default(0)
}

model products_price {
  id            Int         @id @default(autoincrement())
  product       products?   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id    Int
  name          String
  type_price    type_price? @relation(fields: [type_price_id], references: [id], onDelete: Cascade)
  type_price_id Int
  price         Decimal     @db.Decimal(9, 2)
  currency      currency?   @relation(fields: [currency_id], references: [id])
  currency_id   Int
  created_at    String
  updated_at    String
}

model products_leftover {
  id            Int         @id @default(autoincrement())
  product       products?   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id    Int
  storehouse    storehouse? @relation(fields: [storehouse_id], references: [id], onDelete: Cascade)
  storehouse_id Int
  qnt           Int         @default(0)
  price         Decimal     @db.Decimal(9, 2)
  currency      currency?   @relation(fields: [currency_id], references: [id])
  currency_id   Int
  created_at    String
  updated_at    String

  @@unique(fields: [product_id, storehouse_id])
}

model products_import {
  id              Int                       @id @default(autoincrement())
  number          Int
  user            User?                     @relation(fields: [id_user], references: [id])
  id_user         Int
  income_items    income_items?             @relation(fields: [income_items_id], references: [id], onDelete: Cascade)
  income_items_id Int
  storehouse      storehouse?               @relation(fields: [storehouse_id], references: [id], onDelete: Cascade)
  storehouse_id   Int
  type_price      type_price?               @relation(fields: [type_price_id], references: [id], onDelete: Cascade)
  type_price_id   Int
  currency        currency?                 @relation(fields: [currency_id], references: [id])
  currency_id     Int
  sum             Decimal                   @db.Decimal(9, 2)
  created_at      String
  updated_at      String
  products        products_import_product[]
}

model products_import_product {
  id                 Int              @id @default(autoincrement())
  user               User?            @relation(fields: [id_user], references: [id])
  id_user            Int
  products_import    products_import? @relation(fields: [products_import_id], references: [id], onDelete: Cascade)
  products_import_id Int
  product            products?        @relation(fields: [product_id], references: [id])
  product_id         Int
  measure            measure?         @relation(fields: [measure_id], references: [id])
  measure_id         Int?
  type               String
  qnt                Int
  price              Decimal          @db.Decimal(9, 2)
  sum                Decimal          @db.Decimal(9, 2)
  created_at         String
  updated_at         String
}

model products_moving {
  id                      Int                       @id @default(autoincrement())
  number                  Int
  user                    User?                     @relation(fields: [id_user], references: [id])
  id_user                 Int
  storehouse_sender       storehouse?               @relation("storehouseSender", fields: [storehouse_sender_id], references: [id], onDelete: Cascade)
  storehouse_sender_id    Int
  storehouse_consignee    storehouse?               @relation("storehouseConsignee", fields: [storehouse_consignee_id], references: [id], onDelete: Cascade)
  storehouse_consignee_id Int
  sum                     Decimal                   @db.Decimal(9, 2)
  created_at              String
  updated_at              String
  products                products_moving_product[]
}

model products_moving_product {
  id                 Int              @id @default(autoincrement())
  user               User?            @relation(fields: [id_user], references: [id])
  id_user            Int
  products_moving    products_moving? @relation(fields: [products_moving_id], references: [id], onDelete: Cascade)
  products_moving_id Int
  product            products?        @relation(fields: [product_id], references: [id])
  product_id         Int
  measure            measure?         @relation(fields: [measure_id], references: [id])
  measure_id         Int?
  type               String
  qnt                Int
  price              Decimal          @db.Decimal(9, 2)
  sum                Decimal          @db.Decimal(9, 2)
  created_at         String
  updated_at         String
}

model products_write_off {
  id             Int                          @id @default(autoincrement())
  number         Int
  user           User?                        @relation(fields: [id_user], references: [id])
  id_user        Int
  expenditure    expenditure?                 @relation(fields: [expenditure_id], references: [id], onDelete: Cascade)
  expenditure_id Int
  storehouse     storehouse?                  @relation(fields: [storehouse_id], references: [id], onDelete: Cascade)
  storehouse_id  Int
  sum            Decimal                      @db.Decimal(9, 2)
  created_at     String
  updated_at     String
  products       products_write_off_product[]
}

model products_write_off_product {
  id                    Int                 @id @default(autoincrement())
  user                  User?               @relation(fields: [id_user], references: [id])
  id_user               Int
  products_write_off    products_write_off? @relation(fields: [products_write_off_id], references: [id], onDelete: Cascade)
  products_write_off_id Int
  product               products?           @relation(fields: [product_id], references: [id])
  product_id            Int
  measure               measure?            @relation(fields: [measure_id], references: [id])
  measure_id            Int?
  type                  String
  qnt                   Int
  price                 Decimal             @db.Decimal(9, 2)
  sum                   Decimal             @db.Decimal(9, 2)
  created_at            String
  updated_at            String
}

model products_posting {
  id              Int                        @id @default(autoincrement())
  number          Int
  user            User?                      @relation(fields: [id_user], references: [id])
  id_user         Int
  income_items    income_items?              @relation(fields: [income_items_id], references: [id], onDelete: Cascade)
  income_items_id Int
  storehouse      storehouse?                @relation(fields: [storehouse_id], references: [id], onDelete: Cascade)
  storehouse_id   Int
  type_price      type_price?                @relation(fields: [type_price_id], references: [id], onDelete: Cascade)
  type_price_id   Int
  currency        currency?                  @relation(fields: [currency_id], references: [id])
  currency_id     Int
  sum             Decimal                    @db.Decimal(9, 2)
  created_at      String
  updated_at      String
  products        products_posting_product[]
}

model products_posting_product {
  id                  Int               @id @default(autoincrement())
  user                User?             @relation(fields: [id_user], references: [id])
  id_user             Int
  products_posting    products_posting? @relation(fields: [products_posting_id], references: [id], onDelete: Cascade)
  products_posting_id Int
  product             products?         @relation(fields: [product_id], references: [id])
  product_id          Int
  measure             measure?          @relation(fields: [measure_id], references: [id])
  measure_id          Int?
  type                String
  qnt                 Int
  price               Decimal           @db.Decimal(9, 2)
  sum                 Decimal           @db.Decimal(9, 2)
  created_at          String
  updated_at          String
}

model buy_sell {
  id              Int                @id @default(autoincrement())
  user            User?              @relation(fields: [id_user], references: [id])
  id_user         Int
  number          Int
  type            String
  type_doc        String
  status          String
  supplier        suppliers?         @relation(fields: [supplier_id], references: [id])
  supplier_id     Int?
  client          clients?           @relation(fields: [client_id], references: [id])
  client_id       Int?
  storehouse      storehouse?        @relation(fields: [storehouse_id], references: [id], onDelete: Cascade)
  storehouse_id   Int
  legal_entity    legal_entites?     @relation(fields: [legal_entity_id], references: [id])
  legal_entity_id Int?
  seller_id       Int?
  courier_id      Int?
  type_price      type_price?        @relation(fields: [type_price_id], references: [id], onDelete: Cascade)
  type_price_id   Int
  currency        currency?          @relation(fields: [currency_id], references: [id])
  currency_id     Int
  sum             Decimal            @db.Decimal(9, 2)
  sum_paid        Decimal            @default(0) @db.Decimal(9, 2)
  note            String?
  created_at      String
  updated_at      String
  deleted_at      String?
  products        buy_sell_product[]
}

model buy_sell_product {
  id              Int       @id @default(autoincrement())
  user            User?     @relation(fields: [id_user], references: [id])
  id_user         Int
  buy_sell        buy_sell? @relation(fields: [buy_sell_id], references: [id], onDelete: Cascade)
  buy_sell_id     Int
  product         products? @relation(fields: [product_id], references: [id])
  product_id      Int
  measure         measure?  @relation(fields: [measure_id], references: [id])
  measure_id      Int?
  type            String
  qnt             Int
  price           Decimal   @db.Decimal(9, 2)
  price_w_service Decimal?  @db.Decimal(9, 2)
  discount        Int?
  sum             Decimal   @db.Decimal(9, 2)
  sum_w_service   Decimal?  @db.Decimal(9, 2)
  created_at      String
  updated_at      String
}
