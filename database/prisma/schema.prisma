generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               BigInt             @id @default(autoincrement())
  acc              String?
  f_name           String?
  s_name           String?
  company          String?
  e_mail           String             @unique
  phone            String?
  username         String?
  pass             String?
  status           Int                @default(1)
  role             Int                @default(1)
  google           String?
  facebook         String?
  address          String?
  notes            String?
  created_at       BigInt
  updated_at       BigInt
  deleted_at       BigInt?
  products         Product[]
  banks_details    BankDetail[]
  cash_accounts    CashAccount[]
  Client           Client[]
  CurrencyExchange CurrencyExchange[]
  MovingMoney      MovingMoney[]
  Employee         Employee[]
  Expenditure      Expenditure[]
  IncomeItem       IncomeItem[]
  LegalEntity      LegalEntity[]
  Measure          Measure[]
  Pay              Pay[]
  PayType          PayType[]
  StoreHouse       StoreHouse[]
  Supplier         Supplier[]
  TypePrice        TypePrice[]
  UserCurrency     UserCurrency[]
  Unit             Unit[]
}

//Reference
model Currency {
  id                       Int                  @id @default(autoincrement())
  name                     String?
  represent                String?
  cash_accounts_balance    CashAccountBalance[]
  from_currencies_exchange CurrencyExchange[]   @relation("FromExhangeCurrency")
  to_currencies_exchange   CurrencyExchange[]   @relation("ToExhangeCurrency")
  from_user_currencies     UserCurrency[]       @relation("FromUserCurrency")
  to_user_currencies       UserCurrency[]       @relation("ToUserCurrency")
}

model BankDetail {
  id               Int           @id @default(autoincrement())
  user             User          @relation(fields: [user_id], references: [id])
  user_id          BigInt
  bank_name        String        @unique
  MFO              String?
  checking_account String?
  cash_accounts    CashAccount[]

  @@map("bank_detail")
}

model Expenditure {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id])
  user_id BigInt
  name    String @unique
}

model IncomeItem {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id])
  user_id BigInt
  name    String @unique

  @@map("income_item")
}

model Measure {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id])
  user_id BigInt
  name    String @unique
}

model StoreHouse {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id])
  user_id BigInt
  name    String @unique
}

model TypePrice {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [user_id], references: [id])
  user_id BigInt
  name    String @unique

  @@map("type_price")
}

model Unit {
  id       Int       @id @default(autoincrement())
  user     User      @relation(fields: [user_id], references: [id])
  user_id  BigInt
  name     String    @unique
  products Product[]
}

//Cash and accounts
model CashAccountBalance {
  id          Int      @id @default(autoincrement())
  currency    Currency @relation(fields: [currency_id], references: [id])
  currency_id Int
  balance     Decimal  @db.Decimal(9, 2)

  @@map("cash_account_balance")
}

model CashAccount {
  id                Int           @id @default(autoincrement())
  user              User          @relation(fields: [user_id], references: [id])
  user_id           BigInt
  name              String?
  user_currency_id  Int
  bank_detail       BankDetail?   @relation(fields: [bank_detail_id], references: [id])
  bank_detail_id    Int?
  balanceIn         String?
  turnoverDebt      String?
  turnoverCred      String?
  type              String?
  stream            Json?
  from_moving_money MovingMoney[] @relation("FromCashAccount")
  to_moving_money   MovingMoney[] @relation("ToCashAccount")

  CurrencyExchange CurrencyExchange[]
  Employee         Employee[]
  @@map("cash_account")
}

model Client {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [user_id], references: [id])
  user_id  BigInt
  name     String?
  mobile   String?
  company  String?
  mail     String?
  group_id Int?
  address  String?
  note     String? @db.Text
}

model CurrencyExchange {
  id               Int         @id @default(autoincrement())
  user             User        @relation(fields: [user_id], references: [id])
  user_id          BigInt
  from_currency    Currency    @relation("FromExhangeCurrency", fields: [from_currency_id], references: [id])
  from_currency_id Int
  to_currency      Currency    @relation("ToExhangeCurrency", fields: [to_currency_id], references: [id])
  to_currency_id   Int
  exchange_rate    Decimal     @db.Decimal(15, 2)
  cash_account     CashAccount @relation(fields: [cash_account_id], references: [id])
  cash_account_id  Int
  amount_pay       Decimal     @db.Decimal(15, 2)
  amount_receive   Decimal     @db.Decimal(15, 2)
  note             String?     @db.Text

  @@map("currency_exchange")
}

model MovingMoney {
  id                   Int         @id @default(autoincrement())
  user                 User        @relation(fields: [user_id], references: [id])
  user_id              BigInt
  from_cash_account    CashAccount @relation("FromCashAccount", fields: [from_cash_account_id], references: [id])
  from_cash_account_id Int
  to_cash_account      CashAccount @relation("ToCashAccount", fields: [to_cash_account_id], references: [id])
  to_cash_account_id   Int
  amount               Decimal     @db.Decimal(15, 2)
  note                 String?     @db.Text

  @@map("moving_money")
}

model Employee {
  id             BigInt       @id @default(autoincrement())
  user           User         @relation(fields: [user_id], references: [id])
  user_id        BigInt
  f_name         String?
  s_name         String?
  mobile         String?
  password       String
  mail           String
  role_id        String?
  cash_acc       CashAccount? @relation(fields: [cash_acc_id], references: [id])
  cash_acc_id    Int
  dashboard      Int          @default(0) @db.TinyInt
  supplier       Int          @default(0) @db.TinyInt
  cash_account   Int          @default(0) @db.TinyInt
  order_supplier String?      @db.Text
}

model LegalEntity {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [user_id], references: [id])
  user_id    BigInt
  name       String
  mail       String?
  site       String?
  mobile     String?
  account    String?
  address    String?
  inn        String?
  legal_name String?
  low_system String?
  director   String?
  nds        String?

  @@map("legal_entity")
}

model Pay {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields: [user_id], references: [id])
  user_id         BigInt
  number          Int
  type_id         Int
  type            String
  type_order      String
  cash_account_id String
  legal_entity_id Int?
  note            String?   @db.Text
  payments        PayType[] @relation("Payments")
}

model PayType {
  id          Int     @id @default(autoincrement())
  user        User    @relation(fields: [user_id], references: [id])
  user_id     BigInt
  pay         Pay     @relation("Payments", fields: [pay_id], references: [id])
  pay_id      Int
  currency_id Int
  amount      Decimal @db.Decimal(15, 2)
  type_pay    String
  type_amount String

  @@map("pay_type")
}

model Supplier {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [user_id], references: [id])
  user_id  BigInt
  name     String
  mail     String?
  mobile   String?
  company  String?
  edrpou   String?
  address  String?
  code_nds String?
  nds      String?
  note     String? @db.Text
}

model UserCurrency {
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [user_id], references: [id])
  user_id          BigInt
  from_currency    Currency @relation("FromUserCurrency", fields: [from_currency_id], references: [id])
  from_currency_id Int
  to_currency      Currency @relation("ToUserCurrency", fields: [to_currency_id], references: [id])
  to_currency_id   Int
  exchange_rate    Decimal  @db.Decimal(15, 2)

  @@map("user_currency")
}

//Products
model ProductGroup {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at BigInt
  updated_at BigInt
  products   Product[]

  @@map("product_group")
}

model Product {
  id          BigInt              @id @default(autoincrement())
  user        User                @relation(fields: [user_id], references: [id])
  user_id     BigInt
  is_model    Boolean             @default(false)
  parent_id   Int?
  name        String
  group       ProductGroup        @relation(fields: [group_id], references: [id])
  group_id    Int
  unit        Unit                @relation(fields: [unit_id], references: [id])
  unit_id     Int
  barcode     String
  vendor_code String
  supplier_id Int
  min_stock   Int                 @default(0)
  note        String              @db.Text
  created_at  BigInt
  updated_at  BigInt
  deleted_at  BigInt?
  amount_data ProductAmountData[]
}

model ProductAmountData {
  id          BigInt  @id @default(autoincrement())
  product     Product @relation(fields: [product_id], references: [id])
  product_id  BigInt
  type        String
  name        String
  amount      Decimal @db.Decimal(9, 2)
  currency_id Int
  created_at  BigInt
  updated_at  BigInt

  @@map("product_amount_data")
}
