generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int                 @id @default(autoincrement())
  acc              String?
  f_name           String?
  s_name           String?
  company          String?
  e_mail           String              @unique
  phone            String?
  username         String?
  pass             String?
  status           Int                 @default(1)
  role             Int                 @default(1)
  google           String?
  facebook         String?
  address          String?
  notes            String?
  created_at       String
  updated_at       String
  deleted_at       String?
  products         Product[]
  banks_details    banks_details[]
  cash_accounts    cash_accounts[]
  Client           clients[]
  CurrencyExchange currency_exchange[]
  MovingMoney      moving_money[]
  Employee         employees[]
  Expenditure      expenditure[]
  IncomeItem       income_items[]
  LegalEntity      legal_entites[]
  Measure          measure[]
  Pay              pay[]
  PayType          pay_type[]
  StoreHouse       storehouse[]
  Supplier         suppliers[]
  TypePrice        type_price[]
  UserCurrency     user_currencies[]
  Unit             unit[]
}

//Reference
model currency {
  id                       Int                 @id @default(autoincrement())
  name                     String?
  represent                String?
  created_at               String
  updated_at               String
  cash_accounts_balance    cash_and_accounts[]
  from_currencies_exchange currency_exchange[] @relation("FromExhangeCurrency")
  to_currencies_exchange   currency_exchange[] @relation("ToExhangeCurrency")
  from_user_currencies     user_currencies[]   @relation("FromUserCurrency")
  to_user_currencies       user_currencies[]   @relation("ToUserCurrency")
}

model banks_details {
  id               Int             @id @default(autoincrement())
  user             User            @relation(fields: [id_user], references: [id])
  id_user          Int
  bank_name        String          @unique
  MFO              String?
  checking_account String?
  created_at       String
  updated_at       String
  cash_accounts    cash_accounts[]
}

model expenditure {
  id         Int    @id @default(autoincrement())
  user       User   @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String @unique
  created_at String
  updated_at String
}

model income_items {
  id         Int    @id @default(autoincrement())
  user       User   @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String @unique
  created_at String
  updated_at String
}

model measure {
  id         Int    @id @default(autoincrement())
  user       User   @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String @unique
  created_at String
  updated_at String
}

model storehouse {
  id         Int    @id @default(autoincrement())
  user       User   @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String @unique
  created_at String
  updated_at String
}

model type_price {
  id         Int    @id @default(autoincrement())
  user       User   @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String @unique
  created_at String
  updated_at String
}

model unit {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String    @unique
  created_at String
  updated_at String
  products   Product[]
}

//Cash and accounts
model cash_and_accounts {
  id          Int      @id @default(autoincrement())
  currency    currency @relation(fields: [currency_id], references: [id])
  currency_id Int
  balance     Decimal  @db.Decimal(9, 2)
  created_at  String
  updated_at  String
}

model cash_accounts {
  id                Int            @id @default(autoincrement())
  user              User           @relation(fields: [id_user], references: [id])
  id_user           Int
  name              String?
  user_currency_id  Int
  banks_details     banks_details? @relation(fields: [banks_details_id], references: [id])
  banks_details_id  Int?
  balanceIn         String?
  turnoverDebt      String?
  turnoverCred      String?
  type              String?
  stream            Json?
  from_moving_money moving_money[] @relation("FromCashAccount")
  to_moving_money   moving_money[] @relation("ToCashAccount")
  created_at        String
  updated_at        String
  deleted_at        String?

  CurrencyExchange currency_exchange[]
  Employee         employees[]
}

model clients {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String?
  mobile     String?
  company    String?
  mail       String?
  group_id   Int?
  address    String?
  discount   String?
  duty       String?
  group      String?
  notes      String? @db.Text
  created_at String
  updated_at String
  deleted_at String?
}

model currency_exchange {
  id               Int           @id @default(autoincrement())
  user             User          @relation(fields: [id_user], references: [id])
  id_user          Int
  from_currency    currency      @relation("FromExhangeCurrency", fields: [from_currency_id], references: [id])
  from_currency_id Int
  to_currency      currency      @relation("ToExhangeCurrency", fields: [to_currency_id], references: [id])
  to_currency_id   Int
  exchange_rate    Decimal       @db.Decimal(15, 2)
  cash_account     cash_accounts @relation(fields: [cash_account_id], references: [id])
  cash_account_id  Int
  amount_pay       Decimal       @db.Decimal(15, 2)
  amount_receive   Decimal       @db.Decimal(15, 2)
  note             String?       @db.Text
  created_at       String
  updated_at       String
  deleted_at       String?
}

model moving_money {
  id                   Int           @id @default(autoincrement())
  user                 User          @relation(fields: [id_user], references: [id])
  id_user              Int
  from_cash_account    cash_accounts @relation("FromCashAccount", fields: [from_cash_account_id], references: [id])
  from_cash_account_id Int
  to_cash_account      cash_accounts @relation("ToCashAccount", fields: [to_cash_account_id], references: [id])
  to_cash_account_id   Int
  amount               Decimal       @db.Decimal(15, 2)
  note                 String?       @db.Text
  created_at           String
  updated_at           String
  deleted_at           String?
}

model employees {
  id             Int            @id @default(autoincrement())
  user           User           @relation(fields: [id_user], references: [id])
  id_user        Int
  f_name         String?
  s_name         String?
  mobile         String?
  password       String
  mail           String
  role_id        String?
  cash_acc       cash_accounts? @relation(fields: [cash_acc_id], references: [id])
  cash_acc_id    Int
  dashboard      Int            @default(0) @db.TinyInt
  supplier       Int            @default(0) @db.TinyInt
  cash_account   Int            @default(0) @db.TinyInt
  order_supplier String?        @db.Text
  created_at     String
  updated_at     String
  deleted_at     String?
}

model legal_entites {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String
  mail       String?
  site       String?
  mobile     String?
  account    String?
  address    String?
  edrpou     String?
  inn        String?
  legal_name String?
  low_system String?
  director   String?
  nds        Boolean @default(false)
  created_at String
  updated_at String
  deleted_at String?
}

model pay {
  id              Int        @id @default(autoincrement())
  user            User       @relation(fields: [id_user], references: [id])
  id_user         Int
  number          Int
  type_id         Int
  type            String
  type_order      String
  cash_account_id String
  legal_entity_id Int?
  note            String?    @db.Text
  payments        pay_type[] @relation("Payments")
  created_at      String
  updated_at      String
  deleted_at      String?
}

model pay_type {
  id          Int     @id @default(autoincrement())
  user        User    @relation(fields: [id_user], references: [id])
  id_user     Int
  pay         pay     @relation("Payments", fields: [pay_id], references: [id])
  pay_id      Int
  currency_id Int
  amount      Decimal @db.Decimal(15, 2)
  type_pay    String
  type_amount String
  created_at  String
  updated_at  String
}

model suppliers {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [id_user], references: [id])
  id_user    Int
  name       String
  mail       String?
  mobile     String?
  company    String?
  edrpou     String?
  address    String?
  code_nds   String?
  nds        Boolean @default(false)
  note       String? @db.Text
  created_at String
  updated_at String
  deleted_at String?
}

model user_currencies {
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [id_user], references: [id])
  id_user          Int
  from_currency    currency @relation("FromUserCurrency", fields: [from_currency_id], references: [id])
  from_currency_id Int
  to_currency      currency @relation("ToUserCurrency", fields: [to_currency_id], references: [id])
  to_currency_id   Int
  exchange_rate    Decimal  @db.Decimal(15, 2)
  created_at       String
  updated_at       String
  deleted_at       String?
}

//Products
model ProductGroup {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at String
  updated_at String
  products   Product[]

  @@map("product_group")
}

model Product {
  id          Int                 @id @default(autoincrement())
  user        User                @relation(fields: [id_user], references: [id])
  id_user     Int
  is_model    Boolean             @default(false)
  parent_id   Int?
  name        String
  group       ProductGroup        @relation(fields: [group_id], references: [id])
  group_id    Int
  unit        unit                @relation(fields: [unit_id], references: [id])
  unit_id     Int
  barcode     String
  vendor_code String
  supplier_id Int
  min_stock   Int                 @default(0)
  note        String              @db.Text
  created_at  String
  updated_at  String
  deleted_at  String?
  amount_data ProductAmountData[]
}

model ProductAmountData {
  id          Int     @id @default(autoincrement())
  product     Product @relation(fields: [product_id], references: [id])
  product_id  Int
  type        String
  name        String
  amount      Decimal @db.Decimal(9, 2)
  currency_id String
  created_at  String
  updated_at  String

  @@map("product_amount_data")
}
